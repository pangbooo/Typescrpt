/**
 * 1.语句
 * 
 **/ 

var a = 1 + 3;

// line3 => 语句： 主要为了进行某种操作，一般情况下不需要返回值。‘；’ 表示语句结束
// 1 + 3 => 表达式（expression）： 指一个为了得到返回值的计算式

/**
 * 
 * 2.变量
 * 
**/ 

//2.1
var b = 1;
//1) var b ==> 声明变量a
//2）b = 1  ==> 在变量a与数值1之间建立引用关系 （将数值1“赋值”给变量a）

//声明未定义
var c;
c // undefined


//2.2变量提升
//JavaScript 引擎的工作方式是，先解析代码，获取所有被声明的变量，
//然后再一行一行地运行。这造成的结果，就是所有的变量的声明语句，都会被提升到代码的头部


/**
 * 
 * 6.条件语句
 * 
 **/

//switch （采用的是严格相等运算符（===），而不是相等运算符（==））

var x = 1;

switch (x) {
  case true:
    console.log('x 发生类型转换');
    break;
  default:
    console.log('x 没有发生类型转换');
}

//x 没有发生类型转换

/**
 * 
 * 7.循环语句
 * 
 **/

 //===> while
 //while语句包括一个循环条件和一段代码块，只要条件为真，就不断循环执行代码块。

//  while(条件){
//    语句
//  }

var x = 3;
var i = 0;

while (i < x) {
  console.log(i);
  i++;
}
 //0，1，2

 //===> do{语句} while(条件);
 //先执行一次， 再判断条件

 do{
  console.log(i);
  i++;
 } while(i < x);
 //0, 1, 2

 //===> break 语句和 continue 语句 
 //break语句用于跳出代码块或循环。
 //continue语句用于立即终止本轮循环，返回循环结构的头部，开始下一轮循环 


 //===> 标签（label）
//语句的前面有标签（label），相当于定位符，用于跳转到程序的任意位置，标签的格式如下

//lable: 
//  语句

top:
  for (var i = 0; i < 3; i++){
    for (var j = 0; j < 3; j++){
      if (i === 1 && j === 1) break top;
      console.log('i=' + i + ', j=' + j);
    }
  }
  //i=0,j=0
  //i=0,j=1
  //i=0,j=2
  //i=1,j=0
  //满足条件时，直接跳出双层循环。如果break语句后面不使用标签，则只能跳出内层循环，进入下一次的外层循环


  //标签也可以用于跳出代码块。
  foo: {
    console.log(1);
    break;
    console.log('本行不会输出')
  }
  console.log(2)
  //1
  //2